{"version":3,"sources":["assets/ameno.mp3","components/WebcamComponent.js","components/SoundComponent.js","components/YoutubeComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WebcamComponent","db","firebase","state","savedImages","imageIndex","loading","setRef","webcam","_this","capture","imageSrc","getScreenshot","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","collection","add","image","created","orderBy","get","then","querySnapshot","forEach","doc","push","data","setState","length","nextPhoto","prevPhoto","_this2","this","react_default","a","createElement","style","float","react_webcam_default","audio","ref","screenshotFormat","videoConstraints","width","height","facingMode","Button","onClick","marginBottom","variant","color","display","marginLeft","src","title","alt","Component","SoundComponent","className","mp3_file","controls","autoPlay","YoutubeComponent","YouTube","videoId","opts","playerVars","autoplay","onReady","_onReady","App","text","handleChange","event","_event$target","target","name","value","Object","defineProperty","set","child","on","snap","val","TextField","placeholder","multiline","rows","rowsMax","fullWidth","onChange","components_WebcamComponent","components_YoutubeComponent","components_SoundComponent","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac425d8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ameno.eebb76e4.mp3\";","import React, {Component} from 'react';\r\nimport Webcam from \"react-webcam\";\r\nimport * as firebase from 'firebase'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass WebcamComponent extends Component {\r\n\r\n    db = firebase.firestore();\r\n\r\n    state = {\r\n        savedImages: [],\r\n        imageIndex: 0,\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        let savedImages = [];\r\n        this.db.collection(\"photos\").orderBy('created').get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                savedImages.push(doc.data()['image'])\r\n            });\r\n            this.setState({\r\n                savedImages: savedImages,\r\n                loading: false\r\n            });\r\n        });\r\n    }\r\n\r\n    setRef = webcam => {\r\n        this.webcam = webcam;\r\n    };\r\n\r\n    capture = () => {\r\n        const imageSrc = this.webcam.getScreenshot();\r\n        const savedImages = [];\r\n        const today = new Date();\r\n        const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        this.db.collection('photos').add({\r\n            image: imageSrc,\r\n            created: date + ' ' + time\r\n        });\r\n        this.db.collection(\"photos\").orderBy('created').get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                savedImages.push(doc.data()['image'])\r\n            });\r\n            this.setState({\r\n                savedImages: savedImages,\r\n                imageIndex: savedImages.length - 1\r\n            });\r\n        });\r\n    };\r\n\r\n    nextPhoto = () => {\r\n        this.setState((state) => {\r\n            let index = state.imageIndex + 1 <= state.savedImages.length - 1 ? state.imageIndex + 1 : 0;\r\n            return {imageIndex: index};\r\n        });\r\n    };\r\n\r\n    prevPhoto = () => {\r\n        this.setState((state) => {\r\n            let index = state.imageIndex - 1 >= 0 ? state.imageIndex - 1 : state.savedImages.length - 1;\r\n            return {imageIndex: index};\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const videoConstraints = {\r\n            width: 1280,\r\n            height: 720,\r\n            facingMode: \"user\"\r\n        };\r\n\r\n        return (\r\n            <div style={{float: 'left'}}>\r\n                <Webcam\r\n                    audio={false}\r\n                    ref={this.setRef}\r\n                    screenshotFormat=\"image/jpeg\"\r\n                    videoConstraints={videoConstraints}\r\n                    style={{float: 'left'}}\r\n                />\r\n                <p><Button onClick={this.capture} style={{float: 'left', marginBottom: '20px'}}\r\n                           variant=\"contained\" color=\"primary\">Capture photo</Button></p>\r\n                <div style={{display: this.state.loading ? 'none' : 'block',float: 'left' }}>\r\n                    <p><Button onClick={this.prevPhoto} style={{float: 'left', marginBottom: '20px', marginLeft: '5px'}}\r\n                               variant=\"contained\" color=\"primary\">Prev photo</Button></p>\r\n                    <p><Button onClick={this.nextPhoto} style={{float: 'left', marginBottom: '20px'}}\r\n                               variant=\"contained\" color=\"primary\">Next photo</Button></p>\r\n                    <img\r\n                        src={this.state.savedImages[this.state.imageIndex]}\r\n                        title='photo'\r\n                     alt='photo'/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WebcamComponent;","import React, {Component} from 'react';\r\nimport mp3_file from '../assets/ameno.mp3'\r\n\r\nclass SoundComponent extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='row'>\r\n                <audio src={mp3_file} controls autoPlay/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SoundComponent;","import React, {Component} from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nclass YoutubeComponent extends Component {\r\n\r\n    render() {\r\n        const opts = {\r\n            height: '390',\r\n            width: '640',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n                autoplay: 0\r\n            }\r\n        };\r\n\r\n        return (\r\n            <YouTube\r\n                videoId=\"G1IbRujko-A\"\r\n                opts={opts}\r\n                onReady={this._onReady}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default YoutubeComponent;","import React, {Component} from 'react';\nimport * as firebase from 'firebase'\nimport TextField from '@material-ui/core/TextField';\nimport WebcamComponent from './WebcamComponent'\nimport SoundComponent from './SoundComponent'\nimport YoutubeComponent from \"./YoutubeComponent\";\n\nexport default class App extends Component {\n\n  state = {\n    text: ''\n  };\n\n  //Using arrow functions, we don't need to bind this in constructor\n  handleChange = (event) => {\n    const {name, value} = event.target;\n    this.setState({ [name]: value });\n    firebase.database().ref().set({\n      text: value\n    });\n  };\n\n  componentDidMount() {\n    const textRef = firebase.database().ref().child('text');\n    textRef.on('value', snap => {\n      this.setState({\n        text: snap.val()\n      })\n    });\n  }\n\n  render() {\n      return (\n          <div className=\"content\">\n              <div className='row'>\n                  <form>\n                      <TextField\n                          placeholder=\"Loading...\"\n                          multiline={true}\n                          rows={20}\n                          rowsMax={4}\n                          fullWidth\n                          value={this.state.text}\n                          onChange={this.handleChange}\n                      />\n                  </form>\n              </div>\n              <div className='row marginleft'>\n                  <WebcamComponent/>\n              </div>\n              <div className='row marginleft'>\n                  <YoutubeComponent/>\n              </div>\n              <div className='sound marginleft'>\n                  <SoundComponent/>\n              </div>\n          </div>\n      );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBlCsDiug4-MgeRLT-xotmPAATxBcKyKe4\",\n    authDomain: \"reactfirebase-f24a1.firebaseapp.com\",\n    databaseURL: \"https://reactfirebase-f24a1.firebaseio.com\",\n    projectId: \"reactfirebase-f24a1\",\n    storageBucket: \"\",\n    messagingSenderId: \"427259174161\",\n    appId: \"1:427259174161:web:ebf8269d920efbcc\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}